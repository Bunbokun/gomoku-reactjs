{"version":3,"sources":["util.js","Square.js","Board.js","Control.js","WinnerModal.js","App.js","serviceWorker.js","index.js"],"names":["board","n","r","i","push","Array","fill","checker","criteria","step","currentX","currentY","current","count","range","c","j","undefined","Square","props","className","onClick","mark","Board","currentBoard","currentTurn","turn","clickSquare","prev","JSON","parse","stringify","winner","won","onChange","useEffect","map","x","key","sx","e","OPTION","size","Control","useState","option","setOption","type","placeholder","value","parseInt","target","onReset","onUndo","WinnerModal","winnerModal","useRef","ref","style","display","App","history","state","setState","maxWidth","newBoard","newOption","console","log","length","pop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.56226400.chunk.js","sourcesContent":["function board(n) {\n  let r = []\n  for (let i = 0; i < n; i++) {\n    r.push(Array(n).fill(null))\n  }\n  return r\n}\n\nfunction checker(board, criteria, [currentX, currentY], step) {\n  let current = board[currentX][currentY], count = 0, range = []\n  \n  for (let c = - criteria + 1; c < criteria; c++) range.push(c)\n\n  for (const c of range) {\n    const [i, j] = step(c)\n    \n    if (board[i] !== undefined)\n      if (board[i][j] !== undefined) {\n        if (board[i][j] !== current) count=0\n        else count++\n        if (count === criteria) return true\n      }\n  }\n\n  return false\n}\n\nfunction won(board, criteria, [i, j]) {\n  let r = checker(board, criteria, [i, j], (step) => [i + step, j + step]) || checker(board, criteria, [i, j], (step) => [i , j - step]) || checker(board, criteria, [i, j], (step) => [i + step, j - step]) || checker(board, criteria, [i, j], (step) => [i + step, j])\n  return r\n}\n\nexport { board, won }","import React from 'react'\nimport './Square.css'\n\nfunction Square(props) {\n  return (\n    <button className=\"btn btn-board\" onClick={props.onClick}>\n      <span className={props.mark === false? \"x\" : props.mark === true? \"o\" : \"\"}></span>\n    </button>\n  )\n}\n\nexport default Square","import React, { useState, useEffect } from 'react'\nimport './Board.css'\nimport { board, won } from './util'\nimport Square from './Square'\n\nfunction Board(props) {\n  const currentBoard = props.current.board\n  const currentTurn = props.current.turn\n  const criteria = props.current.criteria\n\n  function clickSquare(i, j) {\n    const prev = JSON.parse(JSON.stringify(props.current));\n    if (currentBoard[i][j] != null)\n      return\n    currentBoard[i][j] = currentTurn\n    let winner = null\n\n    if (won(currentBoard, criteria, [i,j]))\n      winner = currentTurn\n    \n    props.onChange(prev, currentBoard, winner)\n  }\n\n  useEffect(() => {\n    \n  }, [])\n\n  return (\n    <div className=\"w3-justify\">\n      <div className=\"board-container\">\n        <div className=\"board\">\n          {\n            currentBoard.map((x,i) => (\n              <div \n                key={i} \n                className=\"board-row\"\n              >\n                {\n                  x.map((sx,j) => (\n                    <Square\n                      key={j}\n                      mark={sx}\n                      onClick={(e) => clickSquare(i, j)}\n                    />\n                  ))\n                }\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Board","import React, { useState } from 'react'\n\nconst OPTION = {\n  size: 19,\n  criteria: 5\n}\n\nfunction Control(props) {\n  const [option, setOption] = useState(OPTION)\n\n  const handleOnchangeCriteria = (e) => {\n    const criteria = parseInt(e.target.value)\n    setOption({criteria, size: option.size})\n  }\n\n  const handleOnchangeSize = (e) => {\n    const size = parseInt(e.target.value)\n    setOption({criteria: option.criteria, size})\n  }\n\n  const handleReset = () => {\n    props.onReset(option)\n  }\n\n  const handleUndo = () => {\n    props.onUndo()\n  }\n\n  return (\n    <div className=\"w3-card-0\">\n      <header className=\"w3-container w3-light-grey\">\n        <h3>Turn {props.turn? \"O\" : \"X\"}</h3>\n      </header>\n\n      <div className=\"w3-row-padding w3-section\">\n        <div className=\"w3-half\">\n          <label>Size</label>\n          <input \n            className=\"w3-input w3-border\" \n            type=\"number\" \n            placeholder=\"Two\"\n            value={option.size}\n            onChange={handleOnchangeSize}\n          />\n        </div>\n        <div className=\"w3-half\">\n          <label>Criteria</label>\n          <input \n            className=\"w3-input w3-border\" \n            type=\"number\" \n            placeholder=\"Three\"\n            value={option.criteria}\n            onChange={handleOnchangeCriteria}\n          />\n        </div>\n      </div>\n\n      <hr/>\n\n      <button \n        className=\"w3-button w3-block w3-dark-grey\"\n        onClick={handleReset}\n      >\n        Reset\n      </button>\n      <br/>\n      <button \n        className=\"w3-button w3-block w3-dark-grey\"\n        onClick={handleUndo}\n      >\n        Undo\n      </button>\n    </div>\n  )\n}\n\nexport default Control\nexport { OPTION }","import React, { useRef } from 'react'\n\nfunction WinnerModal(props) {\n  const winnerModal = useRef()\n\n  const handleClose = () => {\n    winnerModal.current.style = \"none\"\n  }\n\n  return (\n    <div ref={winnerModal} className=\"w3-modal\" style={{display:  props.winner!=null? \"block\": \"none\"}}>\n      <div className=\"w3-modal-content\">\n        <div className=\"w3-container\">\n          <span onClick={handleClose} className=\"w3-button w3-display-topright\">&times;</span>\n          <p>Winner is {props.winner? \"O\" : \"X\"}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WinnerModal","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Board from './Board'\nimport Control, { OPTION } from './Control'\nimport { board } from './util'\nimport WinnerModal from './WinnerModal';\n\nfunction App() {\n\n  const [state, setState] = useState({\n    current: {\n      board: board(OPTION.size),\n      turn: false,\n      criteria: OPTION.criteria\n    },\n    history: [{\n      board: board(OPTION.size),\n      turn: false,\n      criteria: OPTION.criteria\n    }],\n    winner: null\n  })\n\n  const handleReset = (newOption) => {\n    let newBoard = board(newOption.size)\n    setState({\n      current: {\n        board: newBoard,\n        turn: false,\n        criteria: newOption.criteria\n      },\n      history: [{\n        board: newBoard,\n        turn: false,\n        criteria: newOption.criteria\n      }],\n      winner: null\n    })\n  }\n\n  const handleUndo = () => {\n    console.log(state.history);\n    \n    setState({\n      current: state.history.length > 1 ? state.history.pop() : state.current,\n      history: state.history,\n      winner: null\n    })\n  }\n\n  const handleBoardOnchange = (prev ,newBoard, winner) => {\n    setState({\n      history: [...state.history, prev],\n      current: {\n        board: newBoard,\n        turn: !state.current.turn,\n        criteria: state.current.criteria\n      },\n      winner: winner\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"w3-row-padding w3-content\" style={{maxWidth: \"1024px\"}}>\n        <div className=\"w3-row-padding\">\n          <h2>Gomoku</h2>\n        </div>\n        <div className=\"w3-twothird\">\n          <Board\n            current={state.current}\n            onChange={handleBoardOnchange}\n          />\n        </div>\n        <div className=\"w3-third\">\n          <Control\n            turn={state.current.turn}\n            onReset={handleReset}\n            onUndo={handleUndo}\n          />\n        </div>\n      </div>\n      \n      <WinnerModal\n        winner={state.winner}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './w3.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}